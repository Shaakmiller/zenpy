from zenpy.lib.api_objects import BaseObject
import dateutil.parser


class AccountOverview(BaseObject):
    """
    ######################################################################
    #    Do not modify, this class is autogenerated by gen_classes.py    #
    ######################################################################
    """

    def __init__(self,
                 api=None,
                 average_call_duration=None,
                 average_callback_wait_time=None,
                 average_hold_time=None,
                 average_queue_wait_time=None,
                 average_time_to_answer=None,
                 average_wrap_up_time=None,
                 max_calls_waiting=None,
                 max_queue_wait_time=None,
                 total_call_duration=None,
                 total_callback_calls=None,
                 total_calls=None,
                 total_calls_abandoned_in_queue=None,
                 total_calls_outside_business_hours=None,
                 total_calls_with_exceeded_queue_wait_time=None,
                 total_calls_with_requested_voicemail=None,
                 total_embeddable_callback_calls=None,
                 total_hold_time=None,
                 total_inbound_calls=None,
                 total_outbound_calls=None,
                 total_textback_requests=None,
                 total_voicemails=None,
                 total_wrap_up_time=None,
                 **kwargs):

        self.api = api
        self.average_call_duration = average_call_duration
        self.average_callback_wait_time = average_callback_wait_time
        self.average_hold_time = average_hold_time
        self.average_queue_wait_time = average_queue_wait_time
        self.average_time_to_answer = average_time_to_answer
        self.average_wrap_up_time = average_wrap_up_time
        self.max_calls_waiting = max_calls_waiting
        self.max_queue_wait_time = max_queue_wait_time
        self.total_call_duration = total_call_duration
        self.total_callback_calls = total_callback_calls
        self.total_calls = total_calls
        self.total_calls_abandoned_in_queue = total_calls_abandoned_in_queue
        self.total_calls_outside_business_hours = total_calls_outside_business_hours
        self.total_calls_with_exceeded_queue_wait_time = total_calls_with_exceeded_queue_wait_time
        self.total_calls_with_requested_voicemail = total_calls_with_requested_voicemail
        self.total_embeddable_callback_calls = total_embeddable_callback_calls
        self.total_hold_time = total_hold_time
        self.total_inbound_calls = total_inbound_calls
        self.total_outbound_calls = total_outbound_calls
        self.total_textback_requests = total_textback_requests
        self.total_voicemails = total_voicemails
        self.total_wrap_up_time = total_wrap_up_time

        for key, value in kwargs.items():
            setattr(self, key, value)

        for key in self.to_dict():
            if getattr(self, key) is None:
                try:
                    self._dirty_attributes.remove(key)
                except KeyError:
                    continue


class AgentsActivity(BaseObject):
    """
    ######################################################################
    #    Do not modify, this class is autogenerated by gen_classes.py    #
    ######################################################################
    """

    def __init__(self,
                 api=None,
                 accepted_transfers=None,
                 agent_id=None,
                 available_time=None,
                 avatar_url=None,
                 average_hold_time=None,
                 average_talk_time=None,
                 average_wrap_up_time=None,
                 calls_accepted=None,
                 calls_denied=None,
                 calls_missed=None,
                 calls_put_on_hold=None,
                 forwarding_number=None,
                 name=None,
                 online_time=None,
                 started_transfers=None,
                 status=None,
                 status_code=None,
                 total_call_duration=None,
                 total_hold_time=None,
                 total_talk_time=None,
                 total_wrap_up_time=None,
                 via=None,
                 **kwargs):

        self.api = api
        self.accepted_transfers = accepted_transfers
        self.agent_id = agent_id
        self.available_time = available_time
        self.avatar_url = avatar_url
        self.average_hold_time = average_hold_time
        self.average_talk_time = average_talk_time
        self.average_wrap_up_time = average_wrap_up_time
        self.calls_accepted = calls_accepted
        self.calls_denied = calls_denied
        self.calls_missed = calls_missed
        self.calls_put_on_hold = calls_put_on_hold
        self.forwarding_number = forwarding_number
        self.name = name
        self.online_time = online_time
        self.started_transfers = started_transfers
        self.status = status
        self.status_code = status_code
        self.total_call_duration = total_call_duration
        self.total_hold_time = total_hold_time
        self.total_talk_time = total_talk_time
        self.total_wrap_up_time = total_wrap_up_time
        self.via = via

        for key, value in kwargs.items():
            setattr(self, key, value)

        for key in self.to_dict():
            if getattr(self, key) is None:
                try:
                    self._dirty_attributes.remove(key)
                except KeyError:
                    continue

    @property
    def agent(self):

        if self.api and self.agent_id:
            return self.api._get_agent(self.agent_id)

    @agent.setter
    def agent(self, agent):
        if agent:
            self.agent_id = agent.id
            self._agent = agent


class AgentsOverview(BaseObject):
    """
    ######################################################################
    #    Do not modify, this class is autogenerated by gen_classes.py    #
    ######################################################################
    """

    def __init__(self,
                 api=None,
                 average_accepted_transfers=None,
                 average_available_time=None,
                 average_calls_accepted=None,
                 average_calls_denied=None,
                 average_calls_missed=None,
                 average_calls_put_on_hold=None,
                 average_hold_time=None,
                 average_online_time=None,
                 average_started_transfers=None,
                 average_talk_time=None,
                 average_wrap_up_time=None,
                 total_accepted_transfers=None,
                 total_calls_accepted=None,
                 total_calls_denied=None,
                 total_calls_missed=None,
                 total_calls_put_on_hold=None,
                 total_hold_time=None,
                 total_started_transfers=None,
                 total_talk_time=None,
                 total_wrap_up_time=None,
                 **kwargs):

        self.api = api
        self.average_accepted_transfers = average_accepted_transfers
        self.average_available_time = average_available_time
        self.average_calls_accepted = average_calls_accepted
        self.average_calls_denied = average_calls_denied
        self.average_calls_missed = average_calls_missed
        self.average_calls_put_on_hold = average_calls_put_on_hold
        self.average_hold_time = average_hold_time
        self.average_online_time = average_online_time
        self.average_started_transfers = average_started_transfers
        self.average_talk_time = average_talk_time
        self.average_wrap_up_time = average_wrap_up_time
        self.total_accepted_transfers = total_accepted_transfers
        self.total_calls_accepted = total_calls_accepted
        self.total_calls_denied = total_calls_denied
        self.total_calls_missed = total_calls_missed
        self.total_calls_put_on_hold = total_calls_put_on_hold
        self.total_hold_time = total_hold_time
        self.total_started_transfers = total_started_transfers
        self.total_talk_time = total_talk_time
        self.total_wrap_up_time = total_wrap_up_time

        for key, value in kwargs.items():
            setattr(self, key, value)

        for key in self.to_dict():
            if getattr(self, key) is None:
                try:
                    self._dirty_attributes.remove(key)
                except KeyError:
                    continue


class CurrentQueueActivity(BaseObject):
    """
    ######################################################################
    #    Do not modify, this class is autogenerated by gen_classes.py    #
    ######################################################################
    """

    def __init__(self,
                 api=None,
                 agents_online=None,
                 average_wait_time=None,
                 callbacks_waiting=None,
                 calls_waiting=None,
                 embeddable_callbacks_waiting=None,
                 longest_wait_time=None,
                 **kwargs):

        self.api = api
        self.agents_online = agents_online
        self.average_wait_time = average_wait_time
        self.callbacks_waiting = callbacks_waiting
        self.calls_waiting = calls_waiting
        self.embeddable_callbacks_waiting = embeddable_callbacks_waiting
        self.longest_wait_time = longest_wait_time

        for key, value in kwargs.items():
            setattr(self, key, value)

        for key in self.to_dict():
            if getattr(self, key) is None:
                try:
                    self._dirty_attributes.remove(key)
                except KeyError:
                    continue


class PhoneNumbers(BaseObject):
    """
    ######################################################################
    #    Do not modify, this class is autogenerated by gen_classes.py    #
    ######################################################################
    """

    def __init__(self,
                 api=None,
                 capabilities=None,
                 country_code=None,
                 created_at=None,
                 default_greeting_ids=None,
                 default_group_id=None,
                 display_number=None,
                 greeting_ids=None,
                 group_ids=None,
                 id=None,
                 location=None,
                 name=None,
                 nickname=None,
                 number=None,
                 recorded=None,
                 sms_group_id=None,
                 toll_free=None,
                 transcription=None,
                 **kwargs):

        self.api = api
        self.capabilities = capabilities
        self.country_code = country_code
        self.created_at = created_at
        self.default_greeting_ids = default_greeting_ids
        self.default_group_id = default_group_id
        self.display_number = display_number
        self.greeting_ids = greeting_ids
        self.group_ids = group_ids
        self.id = id
        self.location = location
        self.name = name
        self.nickname = nickname
        self.number = number
        self.recorded = recorded
        self.sms_group_id = sms_group_id
        self.toll_free = toll_free
        self.transcription = transcription

        for key, value in kwargs.items():
            setattr(self, key, value)

        for key in self.to_dict():
            if getattr(self, key) is None:
                try:
                    self._dirty_attributes.remove(key)
                except KeyError:
                    continue

    @property
    def created(self):

        if self.created_at:
            return dateutil.parser.parse(self.created_at)

    @created.setter
    def created(self, created):
        if created:
            self.created_at = created

    @property
    def default_greetings(self):

        if self.api and self.default_greeting_ids:
            return self.api._get_default_greetings(self.default_greeting_ids)

    @default_greetings.setter
    def default_greetings(self, default_greetings):
        if default_greetings:
            self.default_greeting_ids = [o.id for o in default_greetings]
            self._default_greetings = default_greetings

    @property
    def default_group(self):

        if self.api and self.default_group_id:
            return self.api._get_default_group(self.default_group_id)

    @default_group.setter
    def default_group(self, default_group):
        if default_group:
            self.default_group_id = default_group.id
            self._default_group = default_group

    @property
    def greetings(self):

        if self.api and self.greeting_ids:
            return self.api._get_greetings(self.greeting_ids)

    @greetings.setter
    def greetings(self, greetings):
        if greetings:
            self.greeting_ids = [o.id for o in greetings]
            self._greetings = greetings

    @property
    def groups(self):

        if self.api and self.group_ids:
            return self.api._get_groups(self.group_ids)

    @groups.setter
    def groups(self, groups):
        if groups:
            self.group_ids = [o.id for o in groups]
            self._groups = groups

    @property
    def sms_group(self):

        if self.api and self.sms_group_id:
            return self.api._get_sms_group(self.sms_group_id)

    @sms_group.setter
    def sms_group(self, sms_group):
        if sms_group:
            self.sms_group_id = sms_group.id
            self._sms_group = sms_group


class ShowAvailability(BaseObject):
    """
    ######################################################################
    #    Do not modify, this class is autogenerated by gen_classes.py    #
    ######################################################################
    """

    def __init__(self,
                 api=None,
                 available=None,
                 behaviour=None,
                 state_id=None,
                 status=None,
                 via=None,
                 **kwargs):

        self.api = api
        self.available = available
        self.behaviour = behaviour
        self.state_id = state_id
        self.status = status
        self.via = via

        for key, value in kwargs.items():
            setattr(self, key, value)

        for key in self.to_dict():
            if getattr(self, key) is None:
                try:
                    self._dirty_attributes.remove(key)
                except KeyError:
                    continue

    @property
    def state(self):

        if self.api and self.state_id:
            return self.api._get_state(self.state_id)

    @state.setter
    def state(self, state):
        if state:
            self.state_id = state.id
            self._state = state
=======
import logging

import zenpy
from zenpy.lib.api_objects import *
from zenpy.lib.api_objects.chat_objects import *
from zenpy.lib.api_objects.help_centre_objects import Article, Category, Section, Label, Translation, Topic, Post, \
    Subscription, Vote, AccessPolicy, UserSegment
from zenpy.lib.api_objects.talk_objects import *
from zenpy.lib.exception import ZenpyException
from zenpy.lib.proxy import ProxyDict, ProxyList
from zenpy.lib.util import as_singular, get_object_type

log = logging.getLogger(__name__)

__author__ = 'facetoe'


class ZendeskObjectMapping(object):
    """
    Handle converting Zendesk JSON objects to Python ones.
    """
    class_mapping = {
        'ticket': Ticket,
        'user': User,
        'deleted_user': User,
        'organization': Organization,
        'group': Group,
        'brand': Brand,
        'topic': Topic,
        'comment': Comment,
        'attachment': Attachment,
        'thumbnail': Thumbnail,
        'metadata': Metadata,
        'system': System,
        'create': CreateEvent,
        'change': ChangeEvent,
        'notification': NotificationEvent,
        'voicecomment': VoiceCommentEvent,
        'commentprivacychange': CommentPrivacyChangeEvent,
        'satisfactionrating': SatisfactionRatingEvent,
        'ticketsharingevent': TicketSharingEvent,
        'organizationactivity': OrganizationActivityEvent,
        'error': ErrorEvent,
        'tweet': TweetEvent,
        'facebookevent': FacebookEvent,
        'facebookcomment': FacebookCommentEvent,
        'external': ExternalEvent,
        'logmeintranscript': LogmeinTranscriptEvent,
        'push': PushEvent,
        'cc': CcEvent,
        'via': Via,
        'source': Source,
        'job_status': JobStatus,
        'audit': Audit,
        'ticket_event': TicketEvent,
        'tag': Tag,
        'suspended_ticket': SuspendedTicket,
        'ticket_audit': TicketAudit,
        'satisfaction_rating': SatisfactionRating,
        'activity': Activity,
        'group_membership': GroupMembership,
        'ticket_metric': TicketMetric,
        'ticket_metric_event': TicketMetricEvent,
        'status': Status,
        'ticket_metric_item': TicketMetricItem,
        'user_field': UserField,
        'organization_field': OrganizationField,
        'ticket_field': TicketField,
        'ticket_form': TicketForm,
        'request': Request,
        'user_related': UserRelated,
        'organization_membership': OrganizationMembership,
        'upload': Upload,
        'sharing_agreement': SharingAgreement,
        'macro': Macro,
        'result': MacroResult,
        'job_status_result': JobStatusResult,
        'agentmacroreference': AgentMacroReference,
        'identity': Identity,
        'view': View,
        'conditions': Conditions,
        'view_row': ViewRow,
        'view_count': ViewCount,
        'export': Export,
        'sla_policy': SlaPolicy,
        'policy_metric': PolicyMetric,
        'definitions': Definitions,
        'recipient_address': RecipientAddress,
        'recipient': Recipient,
        'response': Response,
        'trigger': zenpy.lib.api_objects.Trigger,
        'automation': Automation,
        'item': Item,
        'target': Target,
        'locale': Locale,
        'custom_field_option': CustomFieldOption,
        'variant': Variant,
        'link': Link,
        'skip': Skip,
        'schedule': Schedule
    }

    skip_attrs = []
    always_dirty = {}

    def __init__(self, api):
        self.api = api
        self.skip_attrs = ['user_fields', 'organization_fields']
        self.always_dirty = dict(
            conditions=('all', 'any'),
            organization_field=('custom_field_options',),
            ticket_field=('custom_field_options',)
        )

    def object_from_json(self, object_type, object_json, parent=None):
        """
        Given a blob of JSON representing a Zenpy object, recursively deserialize it and
         any nested objects it contains. This method also adds the deserialized object
         to the relevant cache if applicable.
        """
        if not isinstance(object_json, dict):
            return object_json
        obj = self.instantiate_object(object_type, parent)
        for key, value in object_json.items():
            if key not in self.skip_attrs:
                key, value = self._deserialize(key, obj, value)
            if isinstance(value, dict):
                value = ProxyDict(value, dirty_callback=getattr(
                    obj, '_dirty_callback', None))
            elif isinstance(value, list):
                value = ProxyList(value, dirty_callback=getattr(
                    obj, '_dirty_callback', None))
            setattr(obj, key, value)
        if hasattr(obj, '_clean_dirty'):
            obj._clean_dirty()
        self.api.cache.add(obj)
        return obj

    def instantiate_object(self, object_type, parent):
        """
        Instantiate a Zenpy object. If this object has a parent, add a callback to call the parent if it is modified.
        This is so the parent object is correctly marked as dirty when a child is modified, eg:

            view.conditions.all.append(<something>)

        Also, some attributes need to be sent together to Zendesk together if either is modified. For example,
        Condition objects need to send both "all" and "any", even if only one has changed. If we have such values
        configured, add them. They will be inspected in the objects to_dict method on serialization.
        """
        ZenpyClass = self.class_for_type(object_type)
        obj = ZenpyClass(api=self.api)
        if parent:
            def dirty_callback():
                parent._dirty = True
                obj._dirty = True

            obj._dirty_callback = dirty_callback
        obj._always_dirty.update(self.always_dirty.get(object_type, []))
        return obj

    def _deserialize(self, key, obj, value):
        if isinstance(value, dict):
            key = self.format_key(key, parent=obj)
            if key in self.class_mapping:
                value = self.object_from_json(key, value, parent=obj)
            elif as_singular(key) in self.class_mapping:
                value = self.object_from_json(
                    as_singular(key), value, parent=obj)
        elif isinstance(value, list) and self.format_key(as_singular(key), parent=obj) in self.class_mapping:
            zenpy_objects = list()
            for item in value:
                object_type = self.format_key(as_singular(key), parent=obj)
                zenpy_objects.append(self.object_from_json(
                    object_type, item, parent=obj))
            value = zenpy_objects
        return key, value

    def class_for_type(self, object_type):
        """ Given an object_type return the class associated with it. """
        if object_type not in self.class_mapping:
            raise ZenpyException("Unknown object_type: " + str(object_type))
        else:
            return self.class_mapping[object_type]

    def format_key(self, key, parent):
        if key == 'result':
            key = "{}_result".format(get_object_type(parent))
        elif key in ('metadata', 'from', 'system', 'photo', 'thumbnails'):
            key = '{}'.format(key)
        return key


class ChatObjectMapping(ZendeskObjectMapping):
    """
    Handle converting Chat API objects to Python ones. This class exists
    mainly to prevent namespace collisions between the two APIs.
    """
    class_mapping = {
        'chat': Chat,
        'offline_msg': OfflineMessage,
        'session': Session,
        'response_time': ResponseTime,
        'visitor': Visitor,
        'webpath': Webpath,
        'count': Count,
        'shortcut': Shortcut,
        'trigger': zenpy.lib.api_objects.chat_objects.Trigger,
        'ban': Ban,
        'account': Account,
        'plan': Plan,
        'billing': Billing,
        'agent': Agent,
        'roles': Roles,
        'search_result': SearchResult,
        'ip_address': IpAddress,
        'department': Department,
        'goal': Goal
    }


class HelpCentreObjectMapping(ZendeskObjectMapping):
    class_mapping = {
        'article': Article,
        'category': Category,
        'section': Section,
        'comment': zenpy.lib.api_objects.help_centre_objects.Comment,
        'article_attachment': zenpy.lib.api_objects.help_centre_objects.ArticleAttachment,
        'label': Label,
        'translation': Translation,
        'topic': zenpy.lib.api_objects.help_centre_objects.Topic,
        'post': Post,
        'subscription': Subscription,
        'vote': Vote,
        'access_policy': AccessPolicy,
        'user_segment': UserSegment
    }

class TalkObjectMapping(ZendeskObjectMapping):
    class_mapping = {
        'account_overview': AccountOverview,
        'agents_activity': AgentsActivity,
        'agents_overview': AgentsOverview,
        'current_queue_activity': CurrentQueueActivity,
        'phone_numbers': PhoneNumbers,
        'availability': ShowAvailability
    }
